import jsPDF from 'jspdf';

export const generateReport = (results) => {
    if (!results) return;

    const reportContent = `
PAYLENS ANALYSIS REPORT
Generated: ${new Date().toLocaleDateString()}

KEY METRICS:
- Total Transactions: ${results.totalTransactions}
- Total Fees Paid: R ${results.totalFees.toFixed(2)}
- Potential Monthly Savings: R ${results.savings.toFixed(2)}
- Failed Transaction Costs: R ${results.failedCosts.toFixed(2)}

RECOMMENDATIONS:
${results.recommendations.map((rec, index) => `${index + 1}. ${rec}`).join('\n')}

Generated by PayLens - Online Payment Analysis
    `.trim();

    const blob = new Blob([reportContent], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = 'paylens-analysis-report.txt';
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
};

export const generatePDFReport = (results) => {
    if (!results) return;

    const doc = new jsPDF({ unit: 'pt', format: 'a4' });
    const pageWidth = doc.internal.pageSize.getWidth();
    const pageHeight = doc.internal.pageSize.getHeight();
    const margin = 50;
    const maxWidth = pageWidth - margin * 2;
    let cursorY = margin;

    // Color scheme
    const colors = {
        primary: [41, 128, 185],     // Blue
        secondary: [52, 73, 94],     // Dark gray
        accent: [230, 126, 34],      // Orange
        success: [39, 174, 96],      // Green
        text: [44, 62, 80],          // Dark blue-gray
        light: [236, 240, 241]       // Light gray
    };

    // Helper function to add styled text
    const addStyledText = (text, x, y, options = {}) => {
        const {
            fontSize = 12,
            fontStyle = 'normal',
            color = colors.text,
            align = 'left',
            maxWidth: textMaxWidth = maxWidth
        } = options;

        doc.setFontSize(fontSize);
        doc.setFont('helvetica', fontStyle);
        doc.setTextColor(...color);

        if (align === 'center') {
            doc.text(text, pageWidth / 2, y, { align: 'center', maxWidth: textMaxWidth });
        } else {
            const lines = doc.splitTextToSize(text, textMaxWidth);
            lines.forEach((line, index) => {
                doc.text(line, x, y + (index * fontSize * 1.2));
            });
            return lines.length * fontSize * 1.2;
        }
        return fontSize * 1.2;
    };

    // Helper function to add section separator
    const addSectionSeparator = (y) => {
        doc.setDrawColor(...colors.light);
        doc.setLineWidth(1);
        doc.line(margin, y, pageWidth - margin, y);
        return 20; // spacing after line
    };

    // Header with background
    doc.setFillColor(...colors.primary);
    doc.rect(0, 0, pageWidth, 80, 'F');

    // Company logo/title
    addStyledText('PAYLENS', margin, 35, {
        fontSize: 24,
        fontStyle: 'bold',
        color: [255, 255, 255]
    });

    addStyledText('Payment Analysis Report', margin, 60, {
        fontSize: 14,
        color: [255, 255, 255]
    });

    cursorY = 120;

    // Report header section
    const reportDate = new Date().toLocaleDateString('en-ZA', {
        year: 'numeric',
        month: 'long',
        day: 'numeric'
    });

    addStyledText('ANALYSIS REPORT', margin, cursorY, {
        fontSize: 20,
        fontStyle: 'bold',
        color: colors.primary
    });
    cursorY += 35;

    addStyledText(`Generated: ${reportDate}`, margin, cursorY, {
        fontSize: 11,
        color: colors.secondary
    });
    cursorY += 40;

    // Key Metrics Section
    cursorY += addSectionSeparator(cursorY);

    addStyledText('KEY METRICS', margin, cursorY, {
        fontSize: 16,
        fontStyle: 'bold',
        color: colors.primary
    });
    cursorY += 30;

    // Metrics in a more structured layout
    const metrics = [
        { label: 'Total Transactions', value: results.totalTransactions.toLocaleString(), color: colors.text },
        { label: 'Total Fees Paid', value: `R ${results.totalFees.toFixed(2)}`, color: colors.accent },
        { label: 'Potential Monthly Savings', value: `R ${results.savings.toFixed(2)}`, color: colors.success },
        { label: 'Failed Transaction Costs', value: `R ${results.failedCosts.toFixed(2)}`, color: colors.accent }
    ];

    metrics.forEach((metric, index) => {
        // Metric label
        addStyledText(metric.label, margin, cursorY, {
            fontSize: 12,
            color: colors.secondary
        });

        // Metric value (right-aligned)
        doc.setFontSize(14);
        doc.setFont('helvetica', 'bold');
        doc.setTextColor(...metric.color);
        doc.text(metric.value, pageWidth - margin, cursorY, { align: 'right' });

        cursorY += 25;
    });

    cursorY += 20;

    // Recommendations Section
    cursorY += addSectionSeparator(cursorY);

    addStyledText('RECOMMENDATIONS', margin, cursorY, {
        fontSize: 16,
        fontStyle: 'bold',
        color: colors.primary
    });
    cursorY += 30;

    // Add recommendations with bullet points
    results.recommendations.forEach((rec, index) => {
        // Check if we need a new page
        if (cursorY + 40 > pageHeight - margin) {
            doc.addPage();
            cursorY = margin;
        }

        // Recommendation number (styled as a badge)
        doc.setFillColor(...colors.primary);
        doc.circle(margin + 8, cursorY - 3, 8, 'F');

        doc.setFontSize(10);
        doc.setFont('helvetica', 'bold');
        doc.setTextColor(255, 255, 255);
        doc.text((index + 1).toString(), margin + 8, cursorY + 2, { align: 'center' });

        // Recommendation text
        const recHeight = addStyledText(rec, margin + 25, cursorY, {
            fontSize: 11,
            color: colors.text,
            maxWidth: maxWidth - 25
        });

        cursorY += Math.max(recHeight, 20) + 10;
    });

    // Footer
    const footerY = pageHeight - 40;
    cursorY += addSectionSeparator(footerY - 20);

    addStyledText('Generated by PayLens - Online Payment Analysis', pageWidth / 2, footerY, {
        fontSize: 10,
        color: colors.secondary,
        align: 'center'
    });

    // Add page numbers if multiple pages
    const pageCount = doc.internal.getNumberOfPages();
    if (pageCount > 1) {
        for (let i = 1; i <= pageCount; i++) {
            doc.setPage(i);
            doc.setFontSize(9);
            doc.setTextColor(...colors.secondary);
            doc.text(`Page ${i} of ${pageCount}`, pageWidth - margin, pageHeight - 20, { align: 'right' });
        }
    }

    // Save the PDF
    doc.save(`paylens-analysis-report-${new Date().toISOString().split('T')[0]}.pdf`);
};